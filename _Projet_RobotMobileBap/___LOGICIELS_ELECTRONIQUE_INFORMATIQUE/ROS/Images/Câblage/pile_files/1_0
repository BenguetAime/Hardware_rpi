(function () {
    'use strict';

    var secondsPerDay = 24 * 60 * 60;
    var millisecondsPerSecond = 1000;
    var gppTimeoutMs = 1000;
    var defaultCmpTimeoutMs = 7000;
    var defaultTcfTimeoutMs = 0;
    var PATH_PREFIX = '/profile/visit/';
    var EXP_SUFFIX = '_exp';
    var Parameters = {
      CLEAR_TAG_FLAG: 'clear_tag_flag'
    };
    var CMPS_QUERIED = 'cmps_queried';
    var GDPR_STRING = 'gdpr_consent';
    var GDPR_TRACE = 'dtmc_cmpcapture';
    var GPP_STRING = 'gpp_string';
    var GPP_CMP_ID = 'gpp_cmp_id';
    var DTM_GPP_STRING = 'dtm_gpp_string';
    var DTM_GPP_CMP_ID = 'dtm_gpp_cmp_id';
    var CONSENT_PARAMS = [GDPR_STRING, GDPR_TRACE, GPP_STRING, GPP_CMP_ID];

    function deleteTag() {
      var scriptElement = document.currentScript;
      if (scriptElement && scriptElement.src.toLowerCase().includes(PATH_PREFIX)) {
        scriptElement.parentNode.removeChild(scriptElement);
      }
    }
    function cleanupScript(integration) {
      var parameters = integration.parameters;
      if (parameters) {
        if (parameters.hasOwnProperty(Parameters.CLEAR_TAG_FLAG)) {
          var clearTagFlag = parameters[Parameters.CLEAR_TAG_FLAG];
          if (clearTagFlag) {
            deleteTag();
          }
        }
      }
    }

    var GPPHandler = function GPPHandler() {
      this.gppQueried = false;
    };
    var setConfig = function setConfig(dtmConfig, pingObject, win) {
      win = win || window;
      if (pingObject && pingObject.gppString) {
        win.localStorage.setItem("".concat(DTM_GPP_STRING), pingObject.gppString);
        win.localStorage.setItem("".concat(DTM_GPP_CMP_ID), pingObject.cmpId);
        dtmConfig["".concat(GPP_STRING)] = pingObject.gppString;
        dtmConfig["".concat(GPP_CMP_ID)] = pingObject.cmpId;
      } else if (win.localStorage.getItem("".concat(DTM_GPP_STRING))) {
        dtmConfig["".concat(GPP_STRING)] = win.localStorage.getItem("".concat(DTM_GPP_STRING));
        dtmConfig["".concat(GPP_CMP_ID)] = win.localStorage.getItem("".concat(DTM_GPP_CMP_ID));
      } else {
        dtmConfig["".concat(GPP_STRING)] = '';
        dtmConfig["".concat(GPP_CMP_ID)] = '';
      }
    };
    var addGppEventListener = function addGppEventListener(dtmConfig, integration, primaryCallback, win) {
      var _this = this;
      win = win || window;
      win.__gpp('addEventListener', function (event, success) {
        if (!success) {
          return;
        }
        if (!_this.gppQueried) {
          _this.gppQueried = true;
          setConfig(dtmConfig, event.pingData, win);
          primaryCallback(dtmConfig, integration);
        } else {
          setConfig(dtmConfig, event.pingData, win);
        }
      }, {}, win);
    };
    var setGppTimeoutHandler = function setGppTimeoutHandler(dtmConfig, integration, primaryCallback, win) {
      var _this2 = this;
      win = win || window;
      setTimeout(function () {
        if (!_this2.gppQueried) {
          _this2.gppQueried = true;
          var pingObject = win.__gpp('ping', function () {}, {}, win);
          setConfig(dtmConfig, pingObject, win);
          primaryCallback(dtmConfig, integration);
        }
      }, gppTimeoutMs);
    };
    var isGppAvailable = function isGppAvailable(win) {
      win = win || window;
      return win['__gpp'] && typeof win['__gpp'] === 'function';
    };
    GPPHandler.prototype.findGppString = function (dtmConfig, integration, primaryCallback, win) {
      win = win || window;
      if (isGppAvailable(win)) {
        addGppEventListener.call(this, dtmConfig, integration, primaryCallback, win);
        setGppTimeoutHandler.call(this, dtmConfig, integration, primaryCallback, win);
      } else {
        primaryCallback(dtmConfig, integration);
      }
    };

    function removeStorageItem(key, type) {
      type = type || 'localStorage';
      try {
        var storage = window[type];
        storage.removeItem(key + EXP_SUFFIX);
        storage.removeItem(key);
        return true;
      } catch (e) {
        console.debug(e);
        return false;
      }
    }
    function getStorageItem(key, type) {
      type = type || 'localStorage';
      var val = null;
      try {
        var storage = window[type];
        var expVal = storage.getItem(key + EXP_SUFFIX);
        if (!expVal) {
          val = storage.getItem(key);
        } else {
          var expDate = new Date(expVal);
          var isValid = expDate.getTime() - Date.now() > 0;
          if (isValid) {
            val = storage.getItem(key);
          } else {
            removeStorageItem(key);
          }
        }
      } catch (e) {
        console.debug(e);
      }
      return val;
    }

    var isValidValue = function isValidValue(val) {
      return val !== 'undefined' && val !== undefined && val !== null && val !== '';
    };
    function getValueNoCookie(key, mode) {
      var localStorage = getStorageItem(key, 'localStorage') || '';
      var sessionStorage = getStorageItem(key, 'sessionStorage') || '';
      var getBestValueNoCookie = function getBestValueNoCookie() {
        if (isValidValue(localStorage)) {
          return localStorage;
        }
        if (isValidValue(sessionStorage)) {
          return sessionStorage;
        }
        return '';
      };
      if (mode === 'all') {
        return {
          localStorage: localStorage,
          sessionStorage: sessionStorage
        };
      }
      return getBestValueNoCookie();
    }

    var TCFHandler = function TCFHandler() {
      this.tcfQueried = false;
      this.cmpTimeout = defaultCmpTimeoutMs;
      this.tcfTimeout = defaultTcfTimeoutMs;
      this.traceString = 'consentDisco';
      this.consentString;
    };
    var isTcfApiAvailable = function isTcfApiAvailable(win) {
      return win.__tcfapi && typeof win.__tcfapi === 'function';
    };
    var isValidTcfString = function isValidTcfString(value) {
      if (value && value.length >= 30 && value.charAt(0) === 'C') {
        return true;
      }
      return false;
    };
    var pushTrace = function pushTrace(traceInfo) {
      this.traceString += '_' + traceInfo;
    };
    var getTcData = function getTcData(win) {
      var tcData;
      if (win.dtm_config && win.dtm_config.dtmc_tcf_string) {
        if (isValidTcfString(win.dtm_config.dtmc_tcf_string)) {
          pushTrace.call(this, 'clientProvided');
          tcData = win.dtm_config.dtmc_tcf_string;
        }
        delete win.dtm_config.dtmc_tcf_string;
      }
      if (!tcData) {
        tcData = getValueNoCookie('dtm_tcdata', 'best');
        if (tcData) {
          pushTrace.call(this, 'localStorage');
        }
      }
      return tcData;
    };
    var setTcData = function setTcData(dtmTcData, win) {
      var expirationDate = new Date(Date.now() + 390 * secondsPerDay * millisecondsPerSecond).toUTCString();
      win.localStorage.setItem('dtm_tcdata', dtmTcData);
      win.localStorage.setItem('dtm_tcdata' + EXP_SUFFIX, expirationDate);
      win.sessionStorage.setItem('dtm_tcdata', dtmTcData);
      win.sessionStorage.setItem('dtm_tcdata' + EXP_SUFFIX, expirationDate);
    };
    var processTcfApi = function processTcfApi(integration, primaryCallback, win) {
      var _this = this;
      if (isTcfApiAvailable(win)) {
        var tcfCallback = function tcfCallback(tcData, tcSuccess) {
          if (tcData) {
            pushTrace.call(_this, '*' + tcData.eventStatus);
          } else {
            pushTrace.call(_this, '*');
          }
          if (tcSuccess) {
            if (tcData.tcString) {
              if (tcData.eventStatus === 'tcloaded' || tcData.eventStatus === 'useractioncomplete') {
                _this.consentString = tcData.tcString;
                if (!_this.tcfQueried) {
                  _this.tcfQueried = true;
                  primaryCallback(integration, _this.consentString, _this.traceString);
                }
                setTcData(_this.consentString, win);
              }
            } else {
              if (!tcData.gdprApplies) {
                _this.consentString = '';
                pushTrace.call(_this, 'notApply');
                if (!_this.tcfQueried) {
                  _this.tcfQueried = true;
                  primaryCallback(integration, _this.consentString, _this.traceString);
                }
              }
            }
          } else {
            _this.consentString = '';
            pushTrace.call(_this, 'noSuccess');
            if (!_this.tcfQueried) {
              _this.tcfQueried = true;
              primaryCallback(integration, _this.consentString, _this.traceString);
            }
          }
        };
        win.__tcfapi('addEventListener', 2, tcfCallback);
        if (!this.tcfQueried) {
          setTimeout(function () {
            if (!_this.tcfQueried) {
              pushTrace.call(_this, 'apiTimeout');
              _this.tcfQueried = true;
              primaryCallback(integration, '', _this.traceString);
            }
          }, this.cmpTimeout);
        }
      } else {
        pushTrace.call(this, 'apiMissing');
        this.consentString = '';
        if (!this.tcfQueried) {
          this.tcfQueried = true;
          primaryCallback(integration, this.consentString, this.traceString);
        }
      }
    };
    TCFHandler.prototype.findTcString = function (integration, primaryCallback, win) {
      var _this2 = this;
      win = win || window;
      try {
        if (integration && integration.parameters) {
          if (integration.parameters.cmpCallbackMs) {
            this.cmpTimeout = integration.parameters.cmpCallbackMs;
          }
          if (integration.parameters.awaitTcfApiMs) {
            this.tcfTimeout = integration.parameters.awaitTcfApiMs;
          }
        }
        this.consentString = getTcData.call(this, win);
        if (this.consentString && !this.tcfQueried) {
          this.tcfQueried = true;
          primaryCallback(integration, this.consentString, this.traceString);
        }
        if (isTcfApiAvailable(win) || this.tcfTimeout === 0) {
          processTcfApi.call(this, integration, primaryCallback, win);
        } else {
          var apiTimer = 0;
          var tcfInterval = setInterval(function () {
            if (apiTimer >= _this2.tcfTimeout || isTcfApiAvailable(win)) {
              pushTrace.call(_this2, '!' + apiTimer + '!');
              processTcfApi.call(_this2, integration, primaryCallback, win);
              clearInterval(tcfInterval);
            } else {
              apiTimer += 200;
            }
          }, 200);
        }
      } catch (e) {
        if (!this.tcfQueried) {
          this.tcfQueried = true;
          primaryCallback(integration, '', 'errorOccurred');
        }
      }
    };

    function discoverConsent(integration, finalCallback) {
      var dtmConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var win = arguments.length > 3 ? arguments[3] : undefined;
      win = win || window;
      var tcfComplete = false;
      var gppComplete = false;
      var cmpsQueried = false;
      var tcfCallbackFunc = function tcfCallbackFunc(integration, consentString, traceString) {
        if (consentString) {
          dtmConfig["".concat(GDPR_STRING)] = consentString;
        }
        dtmConfig["".concat(GDPR_TRACE)] = traceString;
        tcfComplete = true;
        if (tcfComplete && gppComplete && !cmpsQueried) {
          dtmConfig["".concat(CMPS_QUERIED)] = true;
          finalCallback(dtmConfig, integration);
          cmpsQueried = true;
        }
      };
      var tcfHandler = new TCFHandler();
      tcfHandler.findTcString(integration, tcfCallbackFunc, win);
      var gppCallbackFunc = function gppCallbackFunc() {
        gppComplete = true;
        if (tcfComplete && gppComplete && !cmpsQueried) {
          dtmConfig["".concat(CMPS_QUERIED)] = true;
          finalCallback(dtmConfig, integration);
          cmpsQueried = true;
        }
      };
      var gppHandler = new GPPHandler();
      gppHandler.findGppString(dtmConfig, integration, gppCallbackFunc, win);
    }

    var fireConsentCallbackUrl = function fireConsentCallbackUrl(dtmConfig, integration) {
      if (!integration || !integration.parameters || !integration.parameters.consentCallback) {
        return;
      }
      var srcUrl = new URL(integration.parameters.consentCallback);
      CONSENT_PARAMS.forEach(function (key) {
        if (dtmConfig.hasOwnProperty(key)) {
          srcUrl.searchParams.append(key, dtmConfig["".concat(key)]);
        }
      });
      srcUrl.searchParams.append(CMPS_QUERIED, true);
      var script = document.createElement('script');
      script.type = 'text/javascript';
      script.src = srcUrl.href;
      document.head.appendChild(script);
    };

    var integration = {"eventType":"consent-disco","env":null,"parameters":{"cmpCallbackMs":"7000","awaitTcfApiMs":"0","consentCallback":"https://fr.rs-online.com/tag_path/profile/visit/consent/js?dtm_cid=81286&dtm_fid=101&dtmc_client_defined_country=f1&dtmc_product_id=7174029&dtm_promo_id=5&dtmc_mpn=MN21+P2+RS&dtm_cmagic=2d2282&dtmc_brand=Duracell&cachebuster=1730780639446&dtm_form_uid=577907822247126097"},"mappings":null,"persistence":null,"fieldMasks":null,"plugins":null,"embeddedScripts":null};
    discoverConsent(integration, fireConsentCallbackUrl);
    cleanupScript(integration);

})();
