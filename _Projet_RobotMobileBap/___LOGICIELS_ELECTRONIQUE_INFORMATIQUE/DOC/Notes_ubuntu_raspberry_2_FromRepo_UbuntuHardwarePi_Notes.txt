##### 	UBUNTU keyring popup message pb/ éviter également de voir le mot de passe vnc changé à chaque fois :
>> https://askubuntu.com/questions/1403943/22-04-remote-desktop-sharing-authentication-password-changes-every-reboot
>> https://linuxconfig.org/how-to-disable-keyring-popup-on-ubuntu


##### Sur ubuntu 22.04 : arduino 1.8.19 installé par:
>>sudo snap install Arduino
_ Thonny:
>>sudo apt install thonny
____
>> adresse ip RaspberyPi - toulon : 192.168.1.179
>> adresse ip VMWARE (2024, my Acer) - toulon : 192.168.1.124








########################## RPI, DEFAUT DETECTES, etc
---------
>> Alternative à "sudo raspi-config", sous ubuntu:
sudo nano /boot/firmware/config.txt

---------
>> vcgencmd get_throttled : 
voir si le RPI est sous tension!
-
0x0 : est attendu pour que tout soit ok
--
Rôle de vcgencmd get_throttled
Détection des conditions anormales :

Vérifie si le Raspberry Pi a subi une limitation des performances (throttling) en raison de :
Une température trop élevée.
Une alimentation insuffisante.

---
La sortie est une valeur hexadécimale qui représente différents états. Exemple :
>>throttled=0x50005

---
Bit position	État	Description
Bit 0	Under-voltage	L'alimentation est insuffisante.
Bit 1	Arm frequency capped	La fréquence du CPU a été réduite pour éviter la surchauffe.
Bit 2	Currently throttled	Le CPU est actuellement limité à cause d'une surchauffe ou d'une sous-tension.
Bit 3	Soft temperature limit	La température a dépassé une limite logicielle et le CPU fonctionne à une fréquence inférieure pour éviter les dommages.
Bit 16	Under-voltage has occurred	Une condition de sous-tension s'est produite dans le passé.
Bit 17	Arm frequency capped has occurred	Une limitation de fréquence CPU s'est produite dans le passé.
Bit 18	Throttling has occurred	Le CPU a été limité dans le passé en raison de la température ou d'une sous-tension.
Bit 19	Soft temperature limit occurred	Une condition de température logicielle a été atteinte dans le passé.


***Exemple d'analyse
***Sortie : throttled=0x50005
--> 0x50005 signifie en binaire : 0101 0000 0000 0000 0101.
Analyse :
Bit 0 : Sous-tension actuelle.
Bit 2 : Le CPU est actuellement limité.
Bit 16 : Sous-tension détectée dans le passé.
Bit 18 : Throttling détecté dans le passé.



--------- 1
>> journalctl -fe : 
comme il n'y a pas d'écran connecté à la RPI, il tente de lancer et relancer le DISPLAY MANAGER et ECHOUE!!!! c'est que l'on voit défiler sur le terminal après cette commande!

--
La commande journalctl -fe est utilisée pour afficher en temps réel les journaux du système sur un système Linux utilisant systemd. Voici une explication détaillée :

Syntaxe
journalctl : Commande pour consulter les journaux enregistrés par le système.
-f : Suit les journaux en temps réel, semblable à la commande tail -f.
-e : Se positionne à la fin des journaux pour afficher les derniers messages.


----------- 1 suite: EVITER QUE LE SYSTEM LANCE LE DISPLAY MANAGER INUTILEMENT
>> changer le systemd target:
>> systemctl get-default : 
current default level (graphical target); sans écran le niveau suivant est multy user": c'est le niveau standard pour les systèmes non-graphical (multy processeur exécutés par différets user par ex);
-- FAIRE :
>> sudo systemctl : 
standard level for non graphical processor
>> sudo systemctl set-default multi-user.target 
(POUR RETOURNER AU CAS PAR DEFAUT, FAIRE: 
>>sudo systemctl set-default graphical.target )
>> sudo reboot

-
>> journalctl -fe : PLUS DE MESSAGE DU DISPLAY MANAGER QUI TENTE DE SE LANCER


##########################






############ SERIAL COM - Arduino, rpi ############
>> ls /dev/tty*

__1 sur notre rpi, il faut avoir les permissions d'accès à la com série :
>> groups (vérifier  présence de dialout, qui donne accès à la com série)
SINON, faire: >> sudo adduser <mon_user_name> dialout : on donne accès à notre user, au grou "dialout"!
(>>sudo reboot s'il le faut, ensuite)

__2 : installer une librairie python (SUR ARDUINO ON A DEJA serial):
>> sudo apt install python3-pip ;(si on a pip, sinon installer)
>> pip3 install pyserial
>> pip3 show pyserial

############ SERIAL COM - Arduino, rpi ############





########################
>> Alternative à "sudo raspi-config", sous ubuntu:
sudo nano /boot/firmware/config.txt

>> ____! !!!!!  UTILISATION DE ~/.bashrc !!!!!!___
Y AJOUTER DES LIGNES : 
source /home/ubuntu/chemin_vers_mon_ws_ros/install/setup.bash

Pour faire :
>> source ~/.bashrc : au lieu de source install/setup.bash pour chaque workspace ros utilisé.
########################



-------------- ROS2 CONNU PAR LE TERMINAL --------------:
>> Étapes pour automatiser le source
Identifier votre shell

Vérifiez quel shell vous utilisez en tapant :
- echo $SHELL
Résultat typique : /bin/bash ou /bin/zsh.
Modifier le fichier de configuration approprié
Si vous utilisez Bash : modifiez le fichier ~/.bashrc.
Si vous utilisez Zsh : modifiez le fichier ~/.zshrc.
Si vous utilisez un autre shell, il faudra adapter l'étape en fonction de votre shell.
--
-Ouvrez le fichier de configuration dans un éditeur de texte (exemple avec nano) :
nano ~/.bashrc
-Ajoutez la ligne suivante à la fin du fichier ::
source /opt/ros/humble/setup.bash
-Si vous utilisez plusieurs workspaces ROS, ajoutez également les autres setup.bash dans le bon ordre (le workspace principal en dernier) :
source /opt/ros/humble/setup.bash
source ~/my_ros_workspace/install/setup.bash

-Recharger le fichier de configuration
Rechargez le fichier modifié pour appliquer les changements immédiatement :
source ~/.bashrc

-VERIFIER :
printenv | grep ROS

-----------
Qu'est-ce que ~/.bashrc ?
~/.bashrc est un fichier de script de configuration spécifique à l'utilisateur.
Il est exécuté automatiquement à chaque fois que vous ouvrez un terminal interactif non connecté 
(par exemple, un nouveau terminal dans une session utilisateur existante).
Il configure l’environnement shell pour l’utilisateur, en ajoutant des alias, des chemins, ou d'autres 
réglages nécessaires pour une session efficace.
---
Automatiser des commandes :

Comme le sourcing de fichiers ROS (source /opt/ros/...) ou l’activation d’environnements virtuels Python.
Charger des scripts ou des configurations tierces :

Certains programmes (comme ROS) nécessitent un fichier de configuration pour fonctionner. Ajouter la commande source dans le ~/.bashrc permet de les charger automatiquement.
-------------- ROS2 CONNU PAR LE TERMINAL --------------:





------------ ROS 1 ------------
>>
https://wiki.ros.org/rosserial

https://wiki.ros.org/rosserial_arduino/Tutorials
------------ ROS 1 ------------


---------- ROS 2 - ARDUINO communication  ----------
____!!!! ros2-arduino : - ROS 2!!!! ____
https://docs.arduino.cc/libraries/ros2arduino/

https://github.com/ROBOTIS-GIT/ros2arduino

----------------------------------------------------





###### COM SERIE : ######
___
*******Miniterm****** 
est un outil de terminal série inclus dans la bibliothèque Python pyserial. 
Il permet de communiquer avec des périphériques connectés via un port série (USB, UART, etc.), 
comme les cartes Arduino ou Raspberry Pi. C'est un outil essentiel pour le débogage et la 
surveillance des données échangées entre un microcontrôleur et un ordinateur.

___
ou can open the serial console window from within the Arduino IDE to send command to the arduino. You can do this by clicking on the right hand side button on the toolbar:
serial console
There you can communicate with the code you've written using the Arduino IDE.
To implement the serial communication, you shall examples in the Arduino IDE file menu.
Use the commandline, you can use:
*** 
>> 
screen /dev/ttyACM0 57600
(and press Ctrl-A k to exit)
***or miniterm:
>>
python3 -m serial.tools.miniterm /dev/ttyACM0 57600
___
>> python3 -m serial.tools.list_ports
>>  python3 -m serial.tools.list_ports -v  ;(détails)


___****
Donnez les droits nécessaires :
Si vous utilisez Linux et que vous obtenez une erreur d'accès au port (Permission denied), ajoutez votre utilisateur au groupe dialout :
bash
Copier le code
>> sudo usermod -a -G dialout $USER
>> Puis, déconnectez-vous et reconnectez-vous.
___

___*** MINITERM ***
- Si la commande miniterm ne fonctionne pas :
Cela peut arriver si le binaire n'est pas lié correctement. Dans ce cas, utilisez la commande Python explicite :

>> python3 -m serial.tools.miniterm -e /dev/ttyACM0 9600

>> miniterm (appel direct)
Lorsque vous exécutez miniterm, vous utilisez un exécutable CLI (Command Line Interface) installé sur votre système lors de l'installation de pyserial avec pip3.
Condition préalable : L'installation de pyserial doit avoir ajouté le chemin vers cet exécutable dans votre variable d'environnement PATH.

>> python3 -m serial.tools.miniterm
Cette méthode appelle directement le module serial.tools.miniterm depuis Python en utilisant le gestionnaire de modules de Python (-m).

>> python3 -m serial.tools.miniterm --port /dev/ttyUSB0 --baudrate 9600

>>Exemple d'utilisation de -e :
python3 -m serial.tools.miniterm /dev/ttyUSB0 9600 -e
Cela signifie que lorsque vous tapez quelque chose, le terminal affichera ce texte immédiatement, et vous pouvez interagir avec le périphérique série en voyant ce que vous tapez.


>>
2. Vérifier les processus qui utilisent le port série
Utilise la commande lsof pour vérifier quel processus utilise actuellement /dev/ttyACM0 :

bash
Copier le code
sudo lsof /dev/ttyACM0
Cette commande te donnera une liste des processus qui utilisent ce port. Si tu vois un processus en particulier (comme arduino ou un autre logiciel de communication série), tu peux essayer de le fermer.

Si tu veux forcer la fermeture d'un processus utilisant le port, tu peux utiliser la commande kill :

bash
Copier le code
sudo kill <PID>
Où <PID> est l'identifiant du processus que tu veux terminer (que tu peux obtenir à partir de lsof).


___
Si vous êtes sur un Raspberry Pi avec Ubuntu :
/dev/ttyAMA0 : Port UART natif accessible via les broches GPIO.
/dev/ttyACM0 : Dispositif USB connecté (comme un Arduino).

######################





####################### 20/10/2024
>> __ ROS HUMBLE __
https://docs.ros.org/en/humble/index.html

>> sudo apt install ros-<distro>-gazebo-ros-pkgs