##########

// Indice 1: moteur Gauche ; Indice 2: moteur Droit
 
// Pins de connexion pour le codeur du moteur 1
const int pinA1 = 18;  // Signal A moteur 1
const int pinB1 = 19;  // Signal B moteur 1

// Pins de connexion pour le codeur du moteur 2
const int pinA2 = 20;  // Signal A moteur 2
const int pinB2 = 21;  // Signal B moteur 2

// Variables pour le comptage d'impulsions et la direction du moteur 1
volatile int pulseCount1 = 0;
int lastPulseCount1 = 0;
volatile int direction1 = 1;

// Variables pour le comptage d'impulsions et la direction du moteur 2
volatile int pulseCount2 = 0;
int lastPulseCount2 = 0;
volatile int direction2 = 1;

const int pulsesPerRevolution = 100;  // Nombre d'impulsions par tour (dépend du moteur/codeur)
unsigned long lastTime = 0;  // Pour le calcul de la vitesse

// Interruption pour le signal A du moteur 1
void ISR_count1() {
  if (digitalRead(pinA1) == digitalRead(pinB1)) {
    direction1 = 1;  // Sens horaire
  } else {
    direction1 = -1; // Sens anti-horaire
  }
  pulseCount1 += direction1;
}

// Interruption pour le signal A du moteur 2
void ISR_count2() {
  if (digitalRead(pinA2) == digitalRead(pinB2)) {
    direction2 = 1;  // Sens horaire
  } else {
    direction2 = -1; // Sens anti-horaire
  }
  pulseCount2 += direction2;
}

void setup() {
  Serial.begin(9600);

  // Configuration des pins pour le moteur 1
  pinMode(pinA1, INPUT);
  pinMode(pinB1, INPUT);
  attachInterrupt(digitalPinToInterrupt(pinA1), ISR_count1, CHANGE);

  // Configuration des pins pour le moteur 2
  pinMode(pinA2, INPUT);
  pinMode(pinB2, INPUT);
  attachInterrupt(digitalPinToInterrupt(pinA2), ISR_count2, CHANGE);

  // Initialisation du temps pour la mesure de la vitesse
  lastTime = millis();
}

void loop() {
  if (millis() - lastTime >= 1000) {
    // Calcul de la vitesse pour le moteur 1
    int pulses1 = pulseCount1 - lastPulseCount1;
    lastPulseCount1 = pulseCount1;
    float rpm1 = (pulses1 / (float)pulsesPerRevolution) * 60.0;

    // Calcul de la vitesse pour le moteur 2
    int pulses2 = pulseCount2 - lastPulseCount2;
    lastPulseCount2 = pulseCount2;
    float rpm2 = (pulses2 / (float)pulsesPerRevolution) * 60.0;

    // Affichage des informations pour le moteur 1
    Serial.print("Moteur 1 - Vitesse (RPM): ");
    Serial.print(abs(rpm1));
    Serial.print(" | Sens: ");
    if (direction1 == 1) {
      Serial.println("Horaire");
    } else {
      Serial.println("Anti-horaire");
    }

    // Affichage des informations pour le moteur 2
    Serial.print("Moteur 2 - Vitesse (RPM): ");
    Serial.print(abs(rpm2));
    Serial.print(" | Sens: ");
    if (direction2 == 1) {
      Serial.println("Horaire");
    } else {
      Serial.println("Anti-horaire");
    }

    // Mise à jour du temps
    lastTime = millis();
  }
}
