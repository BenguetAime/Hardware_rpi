
############################ SOURCES 1 - START ############################
__YouTube Video : Modeling, Simulation, control OF a 4 WHEEL Robot in ROS:
>> https://www.youtube.com/watch?v=ad2jd8SCK-o&t=28s

__Fichier launch.py bien structuré:
>> https://www.reddit.com/r/ROS/comments/10hv6sa/robot_not_visible_in_gazebo_but_visible_in_rviz/?rdt=57927

!!!!!____!!!!!___ATTENTION GAZEBO : 
>> besoin de tag "inertial" pour chaque "link" dans gazebo
>> SPAWN ENTITY IN GAZEBO : 3 moyens; via "file", via "topic": best, via a "database";
>> !!__!! : ATTENTION à l'utilisation des mesh/urdf :
- <mesh filename="package://my_pkg/meshes/base_link.stl"/> : le robot ne s'affichait pas dans gazebo classic/ sous ROS2, mais dans Rviz2 oui;
- <mesh filename="file://$(find my_pkg)/meshes/base_link.stl"/> : marche ainsi;
- lien:
https://answers.ros.org/question/404423/whats-the-correct-way-to-load-mesh-files-in-gazebo-and-rviz/

>> Besoin des tag Concernant le "model_path" (PAS BESOIN POUR un lancement simple, sans monde partiulier, avec un XACRO uniquement) : chemin absolu des modèles 3D
- https://www.reddit.com/r/ROS/comments/10hv6sa/robot_not_visible_in_gazebo_but_visible_in_rviz/?rdt=57927

________ Ros/Arduino : ROS 2 for microcontrollers________
>> ???
https://github.com/micro-ROS

__
>> USING MULTIPLE FILES - ARDUINO
https://www.youtube.com/watch?v=BdstuZP6l5E


__!!!!___ ROSSERIAL, ARDUINO LIBRAIRI For "ROS" serial communication with Arduino
--
rosserial 
provides a ROS communication protocol that works over your Arduino's UART. It allows your Arduino to be a full fledged 
ROS node which can directly publish and subscribe to ROS messages, publish TF transforms, and get the ROS system time.
>> 
https://wiki.ros.org/rosserial_arduino/Tutorials/Arduino%20IDE%20Setup
--
__!!!!___


############################ SOURCES 1 - END ###########################




############################ CODE - C++ - VARIABLES ###########################
_______
Variables Globales
Usage : Accessible partout dans le programme:
-- 
Exemple :
cpp
Copier le code
int globalVar = 0;

void updateGlobalVar() {
    globalVar++;
}


_______
 extern Variables
Usage : Partager des variables globales entre plusieurs fichiers.
--
Exemple :
Dans un fichier .h :

extern int sharedVar;

Dans un fichier .cpp :
int sharedVar = 0;

Utilisation dans un autre fichier :cpp
#include "shared.h"
void accessSharedVar() {
    sharedVar++;
}

______
6. Variables Statiques
Usage : Stocker des données persistantes à travers plusieurs 
appels de fonction ou au niveau de la classe.
---
void incrementCounter() {
    static int counter = 0;
    counter++;
}


______
7. std::shared_ptr et std::unique_ptr (Gestion de Mémoire Dynamique)
Usage : Partager ou posséder de manière unique des ressources dynamiques.
--
#include <memory>

void useSharedPointer() {
    std::shared_ptr<int> ptr = std::make_shared<int>(10);
    // ptr est automatiquement détruit lorsqu'il n'est plus référencé
}


______
 Enums et enum class
Usage : Définir des constantes symboliques, par exemple pour des états
--
enum MotorDirection { FORWARD, BACKWARD, STOPPED };

MotorDirection currentDirection = FORWARD;


_____
9. Lambda Captures
Usage : Capturer des variables dans une fonction anonyme (lambda).
--
int value = 10;
auto lambda = [value]() { return value * 2; };


______
10. Namespaces
Usage : Organiser les variables et fonctions dans des espaces de noms.
Avantages :
Évite les conflits de noms.
--
namespace MotorControl {
    int speed;
}

MotorControl::speed = 100;



############################ END ; CODE - C++ - VARIABLES ###########################

