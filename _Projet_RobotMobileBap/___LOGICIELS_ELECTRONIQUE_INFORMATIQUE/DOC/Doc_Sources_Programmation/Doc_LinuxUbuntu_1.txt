############ 

_____ PATH _____
Quand faut-il modifier PATH ?
Si vous installez un programme dans un dossier non inclus dans le PATH (par exemple, un script Python ou un programme compilé), vous devez :

Ajouter ce dossier au PATH.
Ainsi, vous pourrez exécuter le programme sans donner son chemin complet.
Ajouter un chemin personnalisé au PATH
Pour inclure un dossier contenant miniterm :

Identifiez où miniterm est installé. Par exemple :
>> which miniterm;

Si ce fichier n'est pas trouvé, utilisez une commande comme :

>> find / -name "miniterm" 2>/dev/null

...Supposons que le chemin trouvé soit /home/user/.local/bin.

Ajoutez ce chemin au PATH temporairement :

>> export PATH="$PATH:/home/user/.local/bin"

Si cela fonctionne, ajoutez-le de manière permanente en modifiant le fichier ~/.bashrc (ou ~/.zshrc, selon votre shell) :

>> echo 'export PATH="$PATH:/home/user/.local/bin"' >> ~/.bashrc
>> source ~/.bashrc

****
b) "$PATH"
En utilisant $PATH, vous indiquez que vous voulez conserver les valeurs existantes de la variable PATH.
Cela signifie que vous ajoutez un nouveau dossier tout en gardant les anciens.
c) :/chemin/vers/miniterm
Vous ajoutez /chemin/vers/miniterm comme nouveau répertoire dans la liste des dossiers contenus dans PATH.
Le deux-points : est utilisé comme séparateur entre les différents chemins dans la variable PATH.

--
d) export
Le mot-clé export rend la variable PATH disponible pour tous les sous-processus (programmes ou scripts) lancés depuis ce terminal.
Sans export, la modification serait limitée à la session du shell en cours.
****

****
--Est-ce que PATH doit être modifié à chaque fois ?
Non, si vous l'ajoutez dans ~/.bashrc, il sera chargé automatiquement à chaque ouverture d'un terminal

--Mais si vous utilisez seulement la commande export, la modification n'est valide que pour la session en cours.
****



____________shell
>>
Bash	Bourne Again Shell, le shell par défaut sur la plupart des distributions Linux.

>>******
Le shell est une interface utilisateur qui permet d’interagir avec le système d'exploitation à travers des commandes. C’est un interpréteur de commandes qui traduit les instructions utilisateur en actions effectuées par le système.
* Sous Linux, les shell les plus courants incluent Bash, Zsh, Fish, et d'autres.

>>
1. Rôles principaux du shell
*Exécuter des commandes :
Lorsque vous tapez une commande comme ls ou echo, le shell l’interprète et la transmet au système d'exploitation pour exécution.
Exemple :
-echo "Bonjour, monde !"

*Lancer des programmes :
Le shell permet de lancer des programmes ou scripts (comme des fichiers Python ou Bash).
Exemple :
python3 script.py

*Gérer les processus :
Il vous permet de gérer les processus en cours, comme les suspendre (Ctrl+Z), les arrêter (kill), ou les exécuter en arrière-plan (&).

*****
3. Différence entre terminal et shell
Terminal : Le terminal est l'application graphique ou textuelle qui permet d'accéder au shell.
Exemple : GNOME Terminal, Konsole.
Shell : Le shell est le logiciel qui s’exécute dans le terminal et interprète vos commandes.
*****