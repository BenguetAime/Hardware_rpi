__________  COMMANDE MOTEUR - ARDUINO MEGA, PORT SERIE

D'accord ! Je vais adapter le code pour qu'il puisse recevoir des commandes en tr/min (tours par minute) 
via le port série, et ces commandes ajusteront la vitesse de vos moteurs. Je vais aussi garder le contrôle des moteurs via les encodeurs et vous fournir le tout pour l'exécution.

1. Structure du Code
Nous allons utiliser 3 fichiers :

**pins.h : Contient les définitions des pins pour les moteurs et les encodeurs.
**motor_driver.h et motor_driver.cpp : Contrôle des moteurs (avant, arrière, arrêt, vitesse).
**encoder.h et encoder.cpp : Lecture des encodeurs avec interruptions.
**main.ino : Code principal pour contrôler les moteurs via le port série et lire les positions des encodeurs.


------------
une structure de message standardisée sous forme de texte, qui sera utilisée aussi bien par le code Arduino via le port série que par un futur nœud ROS2 pour publier des commandes sur un topic.

Le format de commande que tu proposes est déjà clair et simple. Nous allons l’adopter tout en l'adaptant aux besoins du code Arduino.

Voici le format que nous allons utiliser :
>>
cmd_Motor={Side:"LEFT"; LinearDirection:"FORWARD"; Rotation:"0"; Speed_rpm: "10"}

-Side: "LEFT" ou "RIGHT" — Indique quel moteur contrôler.
-LinearDirection: "FORWARD" ou "BACKWARD" — Détermine la direction de rotation du moteur.
-Rotation: "0" ou "1" — Permet d'activer ou non la rotation. Si "1", on doit faire tourner le robot, sinon on fait simplement avancer ou reculer.
-Speed_rpm: Vitesse en tr/min (rpm). Cette valeur sera convertie en valeur PWM pour le moteur.
Voici le plan de travail :
--Côté Arduino : Le programme doit lire et parser ce format via le port série, puis contrôler les moteurs en conséquence.
--Côté ROS2 : Le nœud ROS2 enverra les messages sous le même format via un topic.
------------
____





// ################# motor_driver.h ################# //
#ifndef MOTOR_DRIVER_H
#define MOTOR_DRIVER_H

#include <Arduino.h>

class MotorDriver {
  private:
    int _pin1, _pin2, _pwmPin;

  public:
    // Constructeur pour initialiser les broches des moteurs
    MotorDriver(int pin1, int pin2, int pwmPin);

    // Commande d'un moteur : avance ou recule
    void controlMotor(String motorSide, int speed, String direction);

    // Fonction pour faire tourner le robot
    void rotateRobot(int speed, String direction, String moveDirection);
};

#endif
// ################# motor_driver.h ################# //




// ################# motor_driver.cpp ################# //


// ################# motor_driver.cpp ################# //