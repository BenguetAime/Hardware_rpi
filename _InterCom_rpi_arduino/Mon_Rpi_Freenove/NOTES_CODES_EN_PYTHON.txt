### LANCEMENT/EXECUTION DE FICHIERS:
python BreathingLED.py en ldc: pas de gcc...etc




##### PWM #####

In RPi, GPIO18 pin has the ability to output to hardware via PWM with a 10-bit accuracy. This means that 100% 
of the pulse width can be divided into 2
10=1024 equal parts (Ainsi: 1024 valeurs de vitesses possibles pour un moteur).
The wiringPi library of C provides both a hardware PWM and a software PWM method, while the wiringPi 
library of Python does not provide a hardware PWM method. There is only a software PWM option for Python.

## PWM LOGICIELLE (voir BREATHING_LED_4):
---
-global p

-GPIO.setup(pins, GPIO.OUT)
-GPIO.output(LedPin, GPIO.LOW)  # make ledPin output LOW level to turn off LED 
-p = GPIO.PWM(LedPin, 500) (set PWM Frequence to 500Hz): 
LES 3 DERNIERES LIGNES PERMETTENT DE CRéer la PWM LOGICIELLE 
<=> softPwmCreate(LedPin, 0, 100) en C      


-p.start(0)                     # set initial Duty Cycle to 0

-for dc in range(0, 101, 1):   # make the led brighter
            p.ChangeDutyCycle(dc)     # set dc value as the duty cycle
- POUR LE BUZZER PAR EX: p.ChangeFrequency(toneVal)  toneVal:fréquence qlq    # Change Frequency of PWM to toneVal

----
p.stop() # stop PWM
GPIO.cleanup() # Release all GPIO





##### PYTHON _ BASES ####
En Python RPi.GPIO permet d'utiliser le PHYSICAL GPIO Numbering, si on fait: GPIO.setmode(GPIO.BOARD); 
Sinon: GPIO.BCM (numérotation BCM) ;
-
**Souvent:
def setup():
    GPIO.setmode(GPIO.BCM)  # Utiliser la numérotation BCM ou GPIO.setmode(GPIO.BOARD):# Utiliser la 					numérotation Physique
    GPIO.setup(inputPin, GPIO.IN)  # Configurer la broche comme entrée ou  GPIO.setup(ledPin, GPIO.OUT) 			(broche en sortie)

- Dans la bibliothèque RPi.GPIO,
il existe à la fois la fonction GPIO.output() pour contrôler une broche GPIO en sortie (output) et la fonction GPIO.input() pour lire l'état d'une broche GPIO en entrée (input):
**GPIO.output(outputPin, GPIO.HIGH):Ecriture du niveau logique ou GPIO.input(inputPin):lecture niveau logique

-
Import time

time.sleep(2) (2 secondes) <=> delay(2000) en C


-
la fonction GPIO.cleanup() n'existe pas directement en C pour la bibliothèque WiringPi (la bibliothèque équivalente de RPi.GPIO en C pour Raspberry Pi).

En C avec WiringPi, vous devez libérer et réinitialiser les broches GPIO manuellement en utilisant des fonctions spécifiques pour la configuration des broches (ex: remettre en entrée une broche qui était en sortie).
